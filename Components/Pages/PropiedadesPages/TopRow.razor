@inject NavigationManager NavigationManager  

@if (!HideTopRow)  
{  
    <div class="top-row bg-white">  
        <div class="container d-flex align-items-center justify-content-between px-0">  
            <div class="logo-container me-auto">  
                <a href="/">  
                    <img class="imgLogo" src="https://scrgajdklzafafwrxrng.supabase.co/storage/v1/object/public/propiedades/ImgProyect/LogoCompleto.png" alt="Infalible Logo" />  
                </a>  
            </div>  
            <input type="checkbox" id="menu-toggle" class="menu-toggle" hidden />  
            <label for="menu-toggle" class="menu-icon d-lg-none">  
                <span></span>  
                <span></span>  
                <span></span>  
            </label>  
            <div class="nav-links ms-auto  ">
                <a href="/nosotros" class="btn menu-btn">Nosotros</a>
                <a href="/Propiedad/Catalogo?t=Venta" class="btn menu-btn" @onclick="ComprarClick">Comprar</a>
                <a href="/Propiedad/Catalogo?t=Alquiler" class="btn menu-btn" @onclick="AlquilarClick">Alquilar</a>
                <a href="/vende" class="btn menu-btn">Vende</a>
                <a href="/unete" class="btn menu-btn">Forma Parte</a>
                <a href="/foros" class="btn menu-btn">Foros</a>
                <a href="/contactanos" class="btn menu-btn">Cont&aacute;ctanos</a>
                <div class="dropdown">  
                    <button class="btn btnPerson text-white" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">  
                        <i class="bi bi-person"></i>  
                    </button>  

                    <AuthorizeView>  
                        <Authorized Context="authorizedContext">
                            <div class="dropdown-menu bg-light dropDowmHome dropdown-menu-end p-3 mt-3">
                                <div class="d-flex justify-content-center mb-2">
                                    <small class="">
                                        @($"{authorizedContext.User.FindFirst("nombre")?.Value} {authorizedContext.User.FindFirst("apellido")?.Value}")
                                    </small>
                                    <hr class="text-dark"/>
                                </div>
                                <a class="dropdown-item dropdown-item-top" href="/perfil"><i class="bi bi-person-gear"></i> Perfil</a>
                                <a class="dropdown-item dropdown-item-top" href="/carrito"><i class="bi bi-cart"></i> Carrito</a>
                                <a class="dropdown-item dropdown-item-top" href="/citas/agendadas"><i class="bi bi-calendar4-week"></i> Citas Agendadas</a>
                                <AuthorizeView Roles="Admin">  
                                    <Authorized Context="adminContext">
                                        <a class="dropdown-item dropdown-item-top" href="/Admin/Home">
                                            <i class="bi bi-shield-lock"></i> Administrar  
                                        </a>  
                                    </Authorized>  
                                </AuthorizeView>  
                                 
                            </div>  
                        </Authorized>  

                        <NotAuthorized>  
                            <div class="dropdown-menu dropdown-menu-end p-2 mt-2" style="width: 200px;">  
                                <a class="dropdown-item" href="Account/Login"> <i class="bi bi-arrow-bar-right"></i> Iniciar Sesion</a>  
                                <a class="dropdown-item" href="Account/Register"> <i class="bi bi-person-add"></i> Registrarse</a>  
                            </div>  
                        </NotAuthorized>  
                    </AuthorizeView>  
                </div>  
            </div>  
        </div>  
    </div>  
}  

@code {  
    private bool HideTopRow => NavigationManager.Uri.Contains("/Account/Register", StringComparison.OrdinalIgnoreCase) ||  
        NavigationManager.Uri.Contains("/Account/Login", StringComparison.OrdinalIgnoreCase);  

    private string? currentUrl;  

    protected override void OnInitialized()  
    {  
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);  
        NavigationManager.LocationChanged += OnLocationChanged;  
    }  

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)  
    {  
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);  
        StateHasChanged();  
    }  

    public void Dispose()  
    {  
        NavigationManager.LocationChanged -= OnLocationChanged;  
    }  

    private void ComprarClick()
    {
        NavigationManager.NavigateTo("/Propiedad/Catalogo?t=Venta", forceLoad: true);
        StateHasChanged();
    }

    private void AlquilarClick()
    {
        NavigationManager.NavigateTo("/Propiedad/Catalogo?t=Alquiler", forceLoad: true);
        StateHasChanged();
    }
}