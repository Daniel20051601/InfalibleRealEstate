@page "/admin/administrar-usuarios"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject UsuariosService UserService
@inject UserManager<ApplicationUser> UserManager
@inject NotificationService NotificationService
@rendermode InteractiveServer


<PageTitle>Administrar Usuarios</PageTitle>

@if (isLoading)
{
    <div class="d-flex flex-column align-items-center">
        <span class="mb-3 fs-6">Cargando Usuarios...</span>
        <div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else
{
    <div class="card shadow-lg">
        <div class="card-header text-secondary d-flex justify-content-center">
            <strong>Administrar Usuarios</strong>
        </div>
        <div class="card-body">

            <div class="row d-flex justify-content-center mb-2 mt-2">
                <div class="col-md-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="Nombre">Nombre</option>
                        <option value="Email">Email</option>
                        <option value="Rol">Rol</option>
                    </InputSelect>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <input class="form-control" type="text" placeholder="Buscar..." @bind="inputText" />
                        <button class="btn btn-outline-primary" type="button" @onclick="BuscarUsuarios">Buscar</button>
                    </div>
                </div>
            </div>
            <div class="table-responsive mt-3">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Tel&eacute;fono</th>
                            <th>Rol</th>
                            <th>Estado</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (isFiltrando)
                        {
                            <tr>
                                <td colspan="7" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Filtrando...</span>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.Nombre</td>
                                    <td>@user.Apellido</td>
                                    <td>@user.Email</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@RolesPorUsuario[user.Id]</td>
                                    <td>@user.EstadoUsuario?.Nombre</td>
                                    <td>
                                        <a href="/admin/usuariosedit/@user.Id" class="btn btn-outline-primary bi bi-pencil"></a>
                                    </td>
                                </tr>
                            }
                        }
                        
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <span>Mostrando @Users.Count de @totalResultados</span>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="#" @onclick="() => CambiarPagina(currentPage - 1)" @onclick:preventDefault>Anterior</a>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="#" @onclick="() => CambiarPagina(i)" @onclick:preventDefault>@i</a>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" href="#" @onclick="() => CambiarPagina(currentPage + 1)" @onclick:preventDefault>Siguiente</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
}

@code {
    public List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    public Dictionary<string, string> RolesPorUsuario { get; set; } = new();

    public string Filtro { get; set; } = "Nombre";
    public string inputText { get; set; } = string.Empty;
    public bool isLoading { get; set; } = false;
    public bool isFiltrando { get; set; } = false;

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalResultados = 0;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarUsuarios();
        isLoading = false;
    }

    private async Task CargarUsuarios()
    {

        isFiltrando = true;
        var result = await UserService.ListarPaginado(currentPage, pageSize, Filtro, inputText);
        Users = result.Users;
        totalResultados = result.TotalCount;
        totalPages = (int)Math.Ceiling(totalResultados / (double)pageSize);
        if (totalPages == 0) totalPages = 1;

        RolesPorUsuario.Clear();
        foreach (var user in Users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            RolesPorUsuario[user.Id] = roles.FirstOrDefault() ?? "Sin rol";
        }
        isFiltrando = false;


    }

    private async Task BuscarUsuarios()
    {
        currentPage = 1;
        await CargarUsuarios();
        StateHasChanged();
    }

    private async Task CambiarPagina(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await CargarUsuarios();
    }
}