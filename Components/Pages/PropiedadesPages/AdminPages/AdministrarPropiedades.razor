@page "/admin/administrar-propiedades"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject PropiedadService PropiedadesService
@inject Blazored.Toast.Services.IToastService ToastService
@rendermode InteractiveServer

<PageTitle>Administrar Propiedades</PageTitle>
<div class="container">

    <div class="d-flex justify-content-between mb-4">
        <h5 class="text-secondary">Administrar Propiedades</h5>
        <a class="btn btn-success bi bi-plus-lg" href="/admin/propiedades/create"> Agregar</a>
    </div>

    <div class="row d-flex justify-content-center mb-2">
        <div class="col-md-2">
            <InputSelect class="form-select" @bind-Value="Filtro">
                <option value="Titulo">Titulo</option>
                <option value="Ciudad">Ciudad</option>
                <option value="Transaccion">Tipo de Transaccion</option>
            </InputSelect>
        </div>
        <div class="col-md-5">
            <div class="input-group" role="group">
                <input class="form-control" type="text" placeholder="Buscar..." @bind-value="inputText" />
                <button class="btn btn-outline-primary" type="button" @onclick="BuscarPropiedades">Buscar</button>
            </div>
        </div>

        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="Desde" placeholder="Desde" />
        </div>
        <div class="col-md-2">
            <InputDate class="form-control" @bind-Value="Hasta" placeholder="Hasta" />
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3 mt-4">
        <h3 class="form-label"></h3>
        @if (totalResultados > 0)
        {
            <span><strong>@totalResultados</strong> Resultados</span>
        }
    </div>

    @if (propiedadesPaginadas is null)
    {
        <div class="d-flex flex-column align-items-center">
            <span class="mb-3 fs-6">Cargando Propiedades...</span>
            <div>
                <div class="spinner-grow text-primary mx-1" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-primary mx-1" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-primary mx-1" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (!propiedadesPaginadas.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle me-2"></i> No hay propiedades que coincidan con los filtros.
        </div>
    }
    else
    {
        <div class="row row-properties">
            @foreach (var propiedad in propiedadesPaginadas)
            {
                <div class="col-10 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-4 ultimas-card-col">

                    <div class="card ultimas-card h-100">
                        <a href="/Propiedad/Detalle/@propiedad.PropiedadId">
                            @if (propiedad.Imagenes?.Any() == true)
                            {
                                <img src="@propiedad.Imagenes.FirstOrDefault()?.UrlImagen"
                                     class="card-img-top ultimas-card-img"
                                     alt="@propiedad.Titulo">
                            }
                            else
                            {
                                <div class="card-img-top ultimas-card-img bg-light d-flex align-items-center justify-content-center">
                                    <i class="bi bi-house text-muted" style="font-size: 3rem;"></i>
                                </div>
                            }
                            <div class="card-body p-3">
                                <div class="d-flex justify-content-between mb-2">
                                    <small class="text-secondary">@propiedad.TipoTransaccion</small>

                                </div>
                                <h5 class="card-title ultimas-card-title">@propiedad.Titulo</h5>
                                @if (!string.IsNullOrWhiteSpace(propiedad.Detalle?.Descripcion))
                                {
                                    <p class="card-text ultimas-card-desc">
                                        @((propiedad.Detalle.Descripcion.Length > 80)
                                                                    ? propiedad.Detalle.Descripcion.Substring(0, 80) + "..."
                                                                    : propiedad.Detalle.Descripcion)
                        </p>
                                                }
                            </div>
                            <div class="card-footer bg-white border-0 d-flex pt-0 flex-column align-items-center">
                                <div class=" mb-2">
                                    <small class="text-muted"><span class="bi bi-geo-alt"></span> @propiedad.Ciudad</small>
                                </div>

                                <div class="d-flex justify-content-center align-items-center mb-2 gap-3">
                                    @if (propiedad.Detalle != null)
                                    {
                                        @if (propiedad.Detalle?.MetrosCuadrados.HasValue == true && propiedad.Detalle.MetrosCuadrados != 0)
                                        {
                                            <span class="text-secondary d-flex align-items-center">
                                                <i class="bi bi-fullscreen" style="font-size: 13px; vertical-align: middle;"></i>
                                                <span class="ms-1" style="font-size: 13px;">@propiedad.Detalle.MetrosCuadrados m²</span>
                                            </span>
                                        }

                                        @if (propiedad.Detalle?.Habitaciones.HasValue == true && propiedad.Detalle.Habitaciones > 0)
                                        {
                                            <span class="text-secondary d-flex align-items-center">
                                                <span class="material-symbols-outlined"
                                                      style="font-variation-settings: 'wght' 100; font-size: 30px; vertical-align: middle;">
                                                    airline_seat_flat
                                                </span>
                                                <span class="ms-1" style="font-size: 13px;">@propiedad.Detalle?.Habitaciones</span>
                                            </span>
                                        }

                                        @if (propiedad.Detalle?.Banos.HasValue == true && propiedad.Detalle.Banos > 0)
                                        {
                                            <span class="text-secondary d-flex align-items-center">
                                                <span class="material-symbols-outlined"
                                                      style="font-variation-settings: 'wght' 100; font-size: 20px; vertical-align: middle;">
                                                    shower
                                                </span>
                                                <span class="ms-1" style="font-size: 13px;">@propiedad.Detalle.Banos</span>
                                            </span>
                                        }

                                        @if (propiedad.Detalle?.Parqueo.HasValue == true && propiedad.Detalle.Parqueo > 0)
                                        {
                                            <span class="text-secondary d-flex align-items-center">
                                                <span class="material-symbols-outlined"
                                                      style="font-variation-settings: 'wght' 100; font-size: 20px; vertical-align: middle;">
                                                    directions_car
                                                </span>
                                                <span class="ms-1" style="font-size: 13px;">@propiedad.Detalle.Parqueo</span>
                                            </span>
                                        }
                                    }
                                </div>
                                <span class="ultimas-card-price">
                                    @(propiedad.Moneda == "Dolar" ? "USD$" : "DOP$") @propiedad.Precio.ToString("N2")
                                </span>
                            </div>
                        </a>
                        <div class="card-footer bg-white border-0 d-flex justify-content-between mt-1">
                            <a class="btn btn-sm btn-primary text-white" href="/admin/propiedades/edit/@propiedad.PropiedadId">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-sm btn-danger text-white" @onclick="() => AbrirModalEliminar(propiedad.PropiedadId)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>


                </div>
            }
        </div>
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PrevPage">Anterior</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Siguiente</button>
                </li>
            </ul>
        </nav>
    }
</div>

@if (mostrarModalEliminar)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-hidden="true" @onclick:stopPropagation="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CerrarModalEliminar"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar esta propiedad? Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminar">
                        @if (isEliminando)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Eliminando</span>
                        }
                        else
                        {
                            <span>Eliminar</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public string Filtro { get; set; } = "Nombre";
    public string inputText { get; set; } = string.Empty;
    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }
    public bool isEliminando { get; set; } = false;

    private List<Propiedad>? propiedades = new();
    private List<Propiedad>? propiedadesPaginadas = new();
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    private int totalResultados = 0;

    private bool mostrarModalEliminar = false;
    private int propiedadIdAEliminar = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarPropiedades();
    }

    public async void BuscarPropiedades()
    {
        currentPage = 1;
        await CargarPropiedades();
        StateHasChanged();
    }

    private async Task CargarPropiedades()
    {
        propiedadesPaginadas = null;
        StateHasChanged();

        var todasPropiedades = await PropiedadesService.Listar(p => true);

        if (!string.IsNullOrWhiteSpace(inputText))
        {
            switch (Filtro)
            {
                case "Titulo":
                    todasPropiedades = todasPropiedades
                        .Where(p => p.Titulo.Contains(inputText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                case "Ciudad":
                    todasPropiedades = todasPropiedades
                        .Where(p => p.Ciudad != null && p.Ciudad.Contains(inputText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
                case "Transaccion":
                    todasPropiedades = todasPropiedades
                        .Where(p => p.TipoTransaccion != null && p.TipoTransaccion.Contains(inputText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
                    break;
            }
        }

        if (Desde != default && Hasta != default && Desde <= Hasta)
        {
            todasPropiedades = todasPropiedades
                .Where(p => p.FechaPublicacion.Date >= Desde.Date && p.FechaPublicacion.Date <= Hasta.Date)
                .ToList();
        }

        propiedades = todasPropiedades.ToList();
        totalResultados = propiedades.Count;
        totalPages = (int)Math.Ceiling((double)totalResultados / pageSize);

        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages == 0 ? 1 : totalPages;

        var resultadosPaginados = propiedades
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        if (!resultadosPaginados.Any())
        {
            await Task.Delay(1000);
        }

        propiedadesPaginadas = resultadosPaginados;
        StateHasChanged();
    }

    private void AbrirModalEliminar(int propiedadId)
    {
        propiedadIdAEliminar = propiedadId;
        mostrarModalEliminar = true;
    }

    private void CerrarModalEliminar()
    {
        mostrarModalEliminar = false;
        propiedadIdAEliminar = 0;
    }

    private async Task ConfirmarEliminar()
    {
        isEliminando = true;
        if (propiedadIdAEliminar != 0)
        {
            var eliminado = await PropiedadesService.Eliminar(propiedadIdAEliminar);
            if (eliminado)
            {
                ToastService.ShowSuccess("Propiedad eliminada correctamente.");
                await CargarPropiedades();

            }
            else
            {
                ToastService.ShowError("No se pudo eliminar la propiedad.");
            }
        }
        mostrarModalEliminar = false;
        isEliminando = false;
        propiedadIdAEliminar = 0;
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await CargarPropiedades();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await CargarPropiedades();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await CargarPropiedades();
        }
    }
}