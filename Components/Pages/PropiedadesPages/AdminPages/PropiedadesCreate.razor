@page "/admin/propiedades/create"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CategoriaServices CategoriaServices
@inject SupabaseStorageService SupabaseStorage
@inject NavigationManager NavigationManager
@inject PropiedadService PropiedadesServices
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Crear Propiedad</PageTitle>

<EditForm Model="@propiedad" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <div>
        <div>
            <div class="d-flex justify-content-start mb-4">
                <h3 class="text-secondary">Agregar Nueva Propiedad</h3>
            </div>
            <div class="containerCreate">
                <div class="inputImage text-center">
                    <div>
                        <span class="fs-3 text-secondary w-100 d-block">
                            <i class="bi bi-images"></i>
                        </span>
                    </div>
                    <InputFile class="form-control text-secondary w-auto" OnChange="CargarArchivosSeleccionados" accept="image/*" multiple disabled="@(archivosSeleccionados.Count >= 10)" />
                    @if (archivosSeleccionados.Count >= 10)
                    {
                        <div class="mt-2 text-danger small">
                            Has alcanzado el límite de 10 imágenes.
                        </div>
                    }
                    @if (imagenesPreview.Count > 0)
                    {
                        <div class="mt-2 text-success">
                            @for (int i = 0; i < imagenesPreview.Count; i++)
                            {
                                var index = i;
                                <div @key="imagenesPreview[index]" class="preview-img-container position-relative d-inline-block me-2 mb-2">
                                    <img src="@imagenesPreview[index]" class="preview-img rounded" />
                                    <button type="button" class="btn-close preview-close" title="Eliminar"
                                            @onclick="() => EliminarArchivo(index)"></button>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="containerForm mb-3">
                <div class="containerInto">
                    <label for="titulo" class="form-label fs-5">T&iacute;tulo</label>
                    <InputText id="titulo" class="form-control" @bind-Value="propiedad.Titulo" placeholder="Ingrese el t&iacute;tulo de la propiedad" />
                    <ValidationMessage For="@(() => propiedad.Titulo)" class="text-danger" />
                </div>
            </div>

            <div class="containerForm mb-3">
                <div class="containerInto">
                    <label for="tTransaction" class="form-label fs-5">Tipo de Transacción</label>
                    <InputSelect id="tTransaction" class="form-select" @bind-Value="propiedad.TipoTransaccion">
                        <option value="">Seleccione una opción</option>
                        <option value="Venta">Venta</option>
                        <option value="Alquiler">Alquiler</option>
                        <option value="Venta o Alquiler">Venta o Alquiler</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => propiedad.TipoTransaccion)" class="text-danger" />
                </div>
            </div>

            <div class="containerForm">
                <label for="precio" class="form-label fs-5">Precio</label><br />
            </div>

            <div class="containerForm mb-3 mt-0">
                <div>
                    <div class="input-group">
                        <InputSelect class="form-select" @bind-Value="propiedad.Moneda">
                            <option value="Dolar">USD$</option>
                            <option value="Peso">DOP$</option>
                        </InputSelect>
                        <InputNumber id="precio" class="form-control" @bind-Value="propiedad.Precio" placeholder="Ingrese el precio de la propiedad" min="0" />
                        <ValidationMessage For="@(() => propiedad.Precio)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="containerForm mb-3">
                <div class="containerInto">
                    <label for="categoria" class="form-label fs-5">Categoria</label>
                    <InputSelect class="form-select" @bind-Value="propiedad.CategoriaId">
                        <option value="">Seleccione una categoría</option>
                        @foreach (var categoria in categorias)
                        {
                            <option value="@categoria.CategoriaId">@categoria.NombreCategoria</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => propiedad.CategoriaId)" class="text-danger" />
                </div>
            </div>

            <div class="containerForm-row mb-3">
                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="ciudad" class="form-label fs-5">Ciudad</label>
                        <InputText id="ciudad" class="form-control" @bind-Value="propiedad.Ciudad" list="ciudadesRD" placeholder="Ingrese la ciudad donde está ubicado el inmueble" />
                        <datalist id="ciudadesRD">
                            @foreach (var ciudad in ProvinciasyCiudades.Ciudades)
                            {
                                <option value="@ciudad"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => propiedad.Ciudad)" class="text-danger" />
                    </div>
                </div>
                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="Provincia" class="form-label fs-5">Provincia</label>
                        <InputText id="Provincia" class="form-control" @bind-Value="propiedad.EstadoProvincia" list="provincias" placeholder="Ingrese la ciudad donde está ubicado el inmueble" />
                        <datalist id="provincias">
                            @foreach (var provinvia in ProvinciasyCiudades.Provincias)
                            {
                                <option value="@provinvia"></option>
                            }
                        </datalist>
                        <ValidationMessage For="@(() => propiedad.EstadoProvincia)" class="text-danger" />

                    </div>
                </div>
            </div>

            <div class="containerForm-row mb-3">
                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="habitaciones" class="form-label fs-5">Habitaciones</label>
                        <InputNumber id="habitaciones" class="form-control" @bind-Value="propiedad.Detalle!.Habitaciones" placeholder="" min="0" />
                        <ValidationMessage For="@(() => propiedad.Detalle!.Habitaciones)" class="text-danger" />

                    </div>
                </div>
                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="Baños" class="form-label fs-5">Baños</label>
                        <InputNumber id="Baños" class="form-control" @bind-Value="propiedad.Detalle!.Banos" placeholder="" min="0" />
                        <ValidationMessage For="@(() => propiedad.Detalle!.Banos)" class="text-danger" />
                    </div>
                </div>
                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="Parqueos" class="form-label fs-5">Parqueos</label>
                        <InputNumber id="Parqueos" class="form-control" @bind-Value="propiedad.Detalle!.Parqueo" placeholder="" min="0" />
                        <ValidationMessage For="@(() => propiedad.Detalle!.Parqueo)" class="text-danger" />
                    </div>
                </div>

                <div class="containerForm-half">
                    <div class="containerCompleto">
                        <label for="Metros" class="form-label fs-5">Metros cuadrados</label>
                        <InputNumber id="Metros" class="form-control" @bind-Value="propiedad.Detalle!.MetrosCuadrados" placeholder="" min="0" />
                        <ValidationMessage For="@(() => propiedad.Detalle!.MetrosCuadrados)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="containerForm mb-3">
                <div class="containerInto">
                    <label for="descripcion" class="form-label fs-5">Descripci&oacute;n</label>
                    <InputTextArea id="descripcion" class="form-control inputTextAre" @bind-Value="propiedad.Detalle!.Descripcion" placeholder="Ingrese la Descripci&oacute;n de la propiedad" />
                    <ValidationMessage For="@(() => propiedad.Detalle!.Descripcion)" class="text-danger" />
                </div>
            </div>

        </div>

        <div class="container d-flex justify-content-center gap-2">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary" @onclick="Limpiar">Limpiar</button>
                <button type="submit" class="btn btn-outline-success">Guardar</button>
                <a href="/admin/administrar-propiedades" class="btn btn-outline-secondary">Volver</a>
            </div>
            
        </div>

    </div>
</EditForm>

@if (isGuardando)
{
    <div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="false" style="display: block;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body d-flex flex-column align-items-center">
                    <span class="mb-3 fs-5">Guardando...</span>
                    <div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private Propiedad propiedad = Propiedad.CrearNueva(1);
    private List<string> imagenesUrls = new();
    private List<IBrowserFile> archivosSeleccionados = new();
    private bool cargandoImagenes = false;
    private List<Categoria> categorias = new List<Categoria>();
    private List<string> imagenesPreview = new();
    private string? administradorId;

    public bool isGuardando = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            throw new InvalidOperationException("Usuario no autorizado para acceder a este recurso.");
        }

        administradorId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        categorias = await CategoriaServices.Listar(c => true);
        var categoriaId = categorias.Any() ? categorias.First().CategoriaId : 1;
        propiedad = Propiedad.CrearNueva(categoriaId);
    }

    private async Task CargarArchivosSeleccionados(InputFileChangeEventArgs e)
    {
        const int maximoImagenes = 10;
        foreach (var file in e.GetMultipleFiles())
        {
            if (archivosSeleccionados.Count >= maximoImagenes)
            {
                ToastService.ShowWarning($"No se pueden agregar más imágenes. El límite es de {maximoImagenes}.");
                break;
            }

            if (!archivosSeleccionados.Any(f => f.Name == file.Name && f.Size == file.Size))
            {
                archivosSeleccionados.Add(file);
                using var stream = file.OpenReadStream(1024 * 1024 * 15);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();

                var base64 = Convert.ToBase64String(buffer);
                var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
                imagenesPreview.Add(imageDataUrl);
            }
        }
    }

    private void EliminarArchivo(int index)
    {
        if (index >= 0 && index < archivosSeleccionados.Count)
        {
            archivosSeleccionados.RemoveAt(index);
            imagenesPreview.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task Guardar()
    {
        isGuardando = true;
        StateHasChanged();
        await Task.Delay(1); 

        try
        {
            if (string.IsNullOrEmpty(administradorId))
            {
                throw new InvalidOperationException("El ID del administrador no se encontró. No se puede guardar.");
            }

            propiedad.FechaPublicacion = DateTime.UtcNow;
            propiedad.FechaActualizacion = DateTime.UtcNow;
            propiedad.AdministradorId = administradorId;
            propiedad.EstadoPropiedadId = 1;

            var guardado = await PropiedadesServices.Guardar(propiedad);

            if (guardado && archivosSeleccionados.Any())
            {
                var urls = await SupabaseStorage.UploadFiles(archivosSeleccionados);
                foreach (var url in urls)
                {
                    var imagen = new ImagenPropiedad
                    {
                        PropiedadId = propiedad.PropiedadId,
                        UrlImagen = url,
                        Orden = urls.IndexOf(url) + 1
                    };
                    await PropiedadesServices.AgregarImagen(imagen);
                }
            }

            if (guardado)
            {
                ToastService.ShowSuccess("Propiedad creada exitosamente.");
                NavigationManager.NavigateTo("/admin/administrar-propiedades");
                var categoriaId = categorias.Any() ? categorias.First().CategoriaId : 1;
                propiedad = Propiedad.CrearNueva(categoriaId);
                archivosSeleccionados.Clear();
                imagenesUrls.Clear();
                imagenesPreview.Clear();
                
            }
            else
            {
                ToastService.ShowError("Error al guardar la propiedad.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en Guardar: {ex.Message}");
            ToastService.ShowError($"Error: {ex.Message}");
        }
        finally
        {
            isGuardando = false;
            StateHasChanged();
        }
    }
    public void Limpiar()
    {
        propiedad = Propiedad.CrearNueva(1);
        archivosSeleccionados.Clear();
        imagenesUrls.Clear();
        imagenesPreview.Clear();
        StateHasChanged();
    }
}