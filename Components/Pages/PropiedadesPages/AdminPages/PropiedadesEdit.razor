@page "/admin/propiedades/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@inject CategoriaServices CategoriaServices
@inject SupabaseStorageService SupabaseStorage
@inject NavigationManager NavigationManager
@inject PropiedadService PropiedadesServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<PageTitle>Editar Propiedad</PageTitle>

@if (propiedad == null)
{
    <div class="d-flex flex-column align-items-center">
        <span class="mb-3 fs-6">Cargando Propiedades...</span>
        <div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-primary mx-1" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else
{
    <EditForm Model="@propiedad" OnValidSubmit="@Guardar">
        <DataAnnotationsValidator />
        <div>
            <div>
                <div class="containerCreate">
                    <div class="inputImage text-center">
                        <div>
                            <span class="fs-3 text-secondary w-100 d-block">
                                <i class="bi bi-images"></i>
                            </span>
                        </div>
                        <InputFile class="form-control text-secondary w-auto" OnChange="CargarArchivosSeleccionados" accept="image/*" multiple disabled="@((imagenesExistentes.Count + archivosSeleccionados.Count) >= 10)" />
                        @if ((imagenesExistentes.Count + archivosSeleccionados.Count) >= 10)
                        {
                            <div class="mt-2 text-danger small">
                                Has alcanzado el límite de 10 imágenes.
                            </div>
                        }

                        <div class="mt-2">
                            @foreach (var imagen in imagenesExistentes)
                            {
                                <div @key="imagen.ImagenId" class="preview-img-container position-relative d-inline-block me-2 mb-2">
                                    <img src="@imagen.UrlImagen" class="preview-img rounded" />
                                    <button type="button" class="btn-close preview-close" title="Marcar para eliminar"
                                            @onclick="() => MarcarParaEliminar(imagen)"></button>
                                </div>
                            }

                            @foreach (var archivo in archivosSeleccionados)
                            {
                                <div @key="archivo.Key" class="preview-img-container position-relative d-inline-block me-2 mb-2">
                                    <img src="@archivo.Value.PreviewUrl" class="preview-img rounded" />
                                    <button type="button" class="btn-close preview-close" title="Eliminar Nueva Imagen"
                                            @onclick="() => EliminarArchivoNuevo(archivo.Key)"></button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="containerForm mb-3">
                    <div class="containerInto">
                        <label for="titulo" class="form-label fs-5">T&iacute;tulo</label>
                        <InputText id="titulo" class="form-control" @bind-Value="propiedad.Titulo" placeholder="Ingrese el t&iacute;tulo de la propiedad" />
                        <ValidationMessage For="@(() => propiedad.Titulo)" class="text-danger" />
                    </div>
                </div>
                <div class="containerForm mb-3">
                    <div class="containerInto">
                        <label for="estado" class="form-label fs-5">Estado de la propiedad</label>
                        <InputSelect id="estado" class="form-select" @bind-Value="propiedad.EstadoPropiedadId" >
                            <option value="">Sleccione un estado</option>
                            @foreach(var estado in EstadoPropiedades)
                            {
                                <option value="@estado.EstadoPropiedadId">@estado.NombreEstado</option>
                            }          
                        </InputSelect>
                        <ValidationMessage For="@(() => propiedad.EstadoPropiedadId)" class="text-danger" />
                    </div>
                </div>

                <div class="containerForm mb-3">
                    <div class="containerInto">
                        <label for="tTransaction" class="form-label fs-5">Tipo de Transacción</label>
                        <InputSelect id="tTransaction" class="form-select" @bind-Value="propiedad.TipoTransaccion">
                            <option value="">Seleccione una opción</option>
                            <option value="Venta">Venta</option>
                            <option value="Alquiler">Alquiler</option>
                            <option value="Venta o Alquiler">Venta o Alquiler</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => propiedad.TipoTransaccion)" class="text-danger" />
                    </div>
                </div>

                <div class="containerForm">
                    <label for="precio" class="form-label fs-5">Precio</label><br />
                </div>

                <div class="containerForm mb-3 mt-0">
                    <div>
                        <div class="input-group">
                            <InputSelect class="form-select" @bind-Value="propiedad.Moneda">
                                <option value="Dolar">USD$</option>
                                <option value="Peso">DOP$</option>
                            </InputSelect>
                            <InputNumber id="precio" class="form-control" @bind-Value="propiedad.Precio" placeholder="Ingrese el precio de la propiedad" min="0" />
                            <ValidationMessage For="@(() => propiedad.Precio)" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="containerForm mb-3">
                    <div class="containerInto">
                        <label for="categoria" class="form-label fs-5">Categoria</label>
                        <InputSelect class="form-select" @bind-Value="propiedad.CategoriaId">
                            <option value="">Seleccione una categoría</option>
                            @foreach (var categoria in categorias)
                            {
                                <option value="@categoria.CategoriaId">@categoria.NombreCategoria</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => propiedad.CategoriaId)" class="text-danger" />
                    </div>
                </div>

                <div class="containerForm-row mb-3">
                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="ciudad" class="form-label fs-5">Ciudad</label>
                            <InputText id="ciudad" class="form-control" @bind-Value="propiedad.Ciudad" list="ciudadesRD" placeholder="Ingrese la ciudad donde está ubicado el inmueble" />
                            <datalist id="ciudadesRD">
                                @foreach (var ciudad in ProvinciasyCiudades.Ciudades)
                                {
                                    <option value="@ciudad"></option>
                                }
                            </datalist>
                            <ValidationMessage For="@(() => propiedad.Ciudad)" class="text-danger" />
                        </div>
                    </div>
                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="Provincia" class="form-label fs-5">Provincia</label>
                            <InputText id="Provincia" class="form-control" @bind-Value="propiedad.EstadoProvincia" list="provincias" placeholder="Ingrese la ciudad donde está ubicado el inmueble" />
                            <datalist id="provincias">
                                @foreach (var provinvia in ProvinciasyCiudades.Provincias)
                                {
                                    <option value="@provinvia"></option>
                                }
                            </datalist>
                            <ValidationMessage For="@(() => propiedad.EstadoProvincia)" class="text-danger" />

                        </div>
                    </div>
                </div>

                <div class="containerForm-row mb-3">
                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="habitaciones" class="form-label fs-5">Habitaciones</label>
                            <InputNumber id="habitaciones" class="form-control" @bind-Value="propiedad.Detalle!.Habitaciones" placeholder="" min="0" />
                            <ValidationMessage For="@(() => propiedad.Detalle!.Habitaciones)" class="text-danger" />

                        </div>
                    </div>
                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="Baños" class="form-label fs-5">Baños</label>
                            <InputNumber id="Baños" class="form-control" @bind-Value="propiedad.Detalle!.Banos" placeholder="" min="0" />
                            <ValidationMessage For="@(() => propiedad.Detalle!.Banos)" class="text-danger" />
                        </div>
                    </div>
                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="Parqueos" class="form-label fs-5">Parqueos</label>
                            <InputNumber id="Parqueos" class="form-control" @bind-Value="propiedad.Detalle!.Parqueo" placeholder="" min="0" />
                            <ValidationMessage For="@(() => propiedad.Detalle!.Parqueo)" class="text-danger" />
                        </div>
                    </div>

                    <div class="containerForm-half">
                        <div class="containerCompleto">
                            <label for="Metros" class="form-label fs-5">Metros cuadrados</label>
                            <InputNumber id="Metros" class="form-control" @bind-Value="propiedad.Detalle!.MetrosCuadrados" placeholder="" min="0" />
                            <ValidationMessage For="@(() => propiedad.Detalle!.MetrosCuadrados)" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="containerForm mb-3">
                    <div class="containerInto">
                        <label for="descripcion" class="form-label fs-5">Descripci&oacute;n</label>
                        <InputTextArea id="descripcion" class="form-control inputTextAre" @bind-Value="propiedad.Detalle!.Descripcion" placeholder="Ingrese la Descripci&oacute;n de la propiedad" />
                        <ValidationMessage For="@(() => propiedad.Detalle!.Descripcion)" class="text-danger" />
                    </div>
                </div>

            </div>

            <div class="container d-flex justify-content-center gap-2">
                <div class="btn-group" role="group">
                    <a href="/admin/administrar-propiedades" class="btn btn-outline-secondary bi bi-arrow-bar-left"> Volver</a>
                    <button type="submit" class="btn btn-outline-success bi bi-floppy" disabled="@isGuardando">
                        Guardar
                    </button>
                </div>

            </div>

        </div>
    </EditForm>

    @if (isGuardando)
    {
        <div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="false" style="display: block;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body d-flex flex-column align-items-center">
                        <span class="mb-3 fs-5">Guardando...</span>
                        <div>
                            <div class="spinner-grow text-primary mx-1" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="spinner-grow text-primary mx-1" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="spinner-grow text-primary mx-1" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}
@code {
    [Parameter]
    public int Id { get; set; }

    public Propiedad? propiedad { get; set; }

    private Dictionary<string, (IBrowserFile File, string PreviewUrl)> archivosSeleccionados = new();
    private List<Categoria> categorias = new List<Categoria>();
    private List<EstadoPropiedad> EstadoPropiedades = new List<EstadoPropiedad>();
    private List<ImagenPropiedad> imagenesExistentes = new();
    private List<ImagenPropiedad> imagenesParaEliminar = new();

    public bool isGuardando = false;

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaServices.Listar(c => true);
        EstadoPropiedades = await PropiedadesServices.ListarEstados();
        propiedad = await PropiedadesServices.Buscar(Id);

        if (propiedad == null)
        {
            NavigationManager.NavigateTo("/admin/administrar-propiedades");
            return;
        }

        if (propiedad.Detalle == null)
        {
            propiedad.Detalle = new PropiedadDetalle();
        }

        if (propiedad.Imagenes != null)
        {
            imagenesExistentes = propiedad.Imagenes.OrderBy(i => i.Orden).ToList();
        }
    }

    private async Task CargarArchivosSeleccionados(InputFileChangeEventArgs e)
    {
        const int maximoImagenes = 10;
        var totalImagenes = imagenesExistentes.Count + archivosSeleccionados.Count;

        foreach (var file in e.GetMultipleFiles())
        {
            if (totalImagenes >= maximoImagenes)
            {
                break;
            }

            var fileKey = Guid.NewGuid().ToString(); // Clave única para cada archivo
            using var stream = file.OpenReadStream(1024 * 1024 * 15);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var buffer = memoryStream.ToArray();

            var base64 = Convert.ToBase64String(buffer);
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";

            archivosSeleccionados.Add(fileKey, (file, imageDataUrl));
            totalImagenes++;
        }
    }

    private void EliminarArchivoNuevo(string fileKey)
    {
        if (archivosSeleccionados.ContainsKey(fileKey))
        {
            archivosSeleccionados.Remove(fileKey);
        }
    }

    private void MarcarParaEliminar(ImagenPropiedad imagen)
    {
        if (imagenesExistentes.Contains(imagen))
        {
            imagenesExistentes.Remove(imagen);
            imagenesParaEliminar.Add(imagen);
        }
    }

    private async Task Guardar()
    {
        if (propiedad is null) return;

        isGuardando = true;
        StateHasChanged();

        try
        {
            foreach (var imagen in imagenesParaEliminar)
            {
                var eliminadaDb = await PropiedadesServices.EliminarImagen(imagen.ImagenId);
                if (eliminadaDb)
                {
                    await SupabaseStorage.DeleteFile(imagen.UrlImagen);
                }
            }

            if (archivosSeleccionados.Any())
            {
                var filesToUpload = archivosSeleccionados.Values.Select(v => v.File).ToList();
                var urls = await SupabaseStorage.UploadFiles(filesToUpload);
                var ordenActual = (await PropiedadesServices.ContarImagenes(propiedad.PropiedadId));

                foreach (var url in urls)
                {
                    ordenActual++;
                    var nuevaImagen = new ImagenPropiedad
                    {
                        PropiedadId = propiedad.PropiedadId,
                        UrlImagen = url,
                        Orden = ordenActual
                    };
                    await PropiedadesServices.AgregarImagen(nuevaImagen);
                }
            }

            propiedad.FechaActualizacion = DateTime.UtcNow;
            var guardado = await PropiedadesServices.Guardar(propiedad);

            if (guardado)
            {
                NavigationManager.NavigateTo("/admin/administrar-propiedades");
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en Guardar: {ex.Message}");
        }
        finally
        {
            isGuardando = false;
            StateHasChanged();
        }
    }
}