@page "/carrito"
@attribute [Authorize]
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UsuariosService UsuariosService
@inject CarritoService CarritoService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<PageTitle>Carrito</PageTitle>

<div class="container my-3">
    <div class="d-flex flex-column text-start">
        <h3 class="titleCarrito fw-bold mt-4"> Carrito</h3>
    </div>
    <div class="row">
        <div class="col-lg-8 col-md-7">
            @if (paginatedCarritoItems is null)
            {
                <div class="d-flex flex-column align-items-center">
                    <div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="spinner-grow text-primary mx-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            }
            else if (!paginatedCarritoItems.Any())
            {
                <div class="alert alert-info text-center">Tu carrito est&aacute; vac&iacute;o.</div>
            }
            else
            {
                <div class="row">
                    @foreach (var item in paginatedCarritoItems)
                    {
                        var propiedad = item.Propiedad;
                        if (propiedad != null)
                        {
                            <div class="col-12 mb-4">
                                <div class="card cardCita h-100 shadow-sm">
                                    <div class="row g-0">
                                        <div class="col-md-4">
                                            <img src="@(propiedad.Imagenes?.FirstOrDefault()?.UrlImagen ?? "https://via.placeholder.com/300x200")"
                                                 class="img-fluid rounded-start h-100 object-fit-cover"
                                                 alt="@propiedad.Titulo"
                                                 style="min-height: 180px; max-height: 200px;">
                                        </div>
                                        <div class="col-md-8">
                                            <div class="card-body">
                                                <div class="mb-2 d-flex justify-content-between align-items-center">
                                                    <span class="bi bi-geo-alt sizeLocation"> @propiedad.Ciudad</span>
                                                    <span class="badge bg-info">@propiedad.TipoTransaccion</span>
                                                </div>
                                                <h5 class="card-title text-truncate" style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                    @propiedad.Titulo
                                                </h5>
                                                <p class="card-text text-muted mb-2"
                                                   style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                                                    @propiedad.Detalle?.Descripcion
                                                </p>
                                                <div class="d-flex justify-content-between">
                                                    <span class="fw-semibold text-info">
                                                        @(propiedad.Moneda == "Dolar" ? "$USD" : "$DOP") @propiedad.Precio.ToString("N2")
                                                    </span>
                                                    <button class="btn btn-outline-danger btn-sm"
                                                            @onclick="() => EliminarItem(item.PropiedadId)"
                                                            title="Eliminar">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                @if (totalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => CambiarPagina(currentPage - 1)">Anterior</button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                <li class="page-item @(currentPage == i ? "active" : "")">
                                    <button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => CambiarPagina(currentPage + 1)">Siguiente</button>
                            </li>
                        </ul>
                    </nav>
                }
            }
        </div>

        <div class="col-lg-4 col-md-5 mb-4">
            <div class="card shadow-sm p-3">
                <div class=" mb-3">
                    <h5><span class="fw-bold">Propiedades Agregadas:</span> @(fullCarritoItems?.Count ?? 0)</h5>
                </div>
                <button class="btn btn-success w-100 mb-2 fw-semibold"
                        @onclick="EnviarPorWhatsapp">
                    <i class="bi bi-whatsapp"></i> Enviar Carrito
                </button>
                <button class="btn btn-primary w-100 fw-semibold"
                        @onclick="@(() => MostrarModalCita = true)">
                    <i class="bi bi-calendar4-week"></i> Solicitar Cita
                </button>
            </div>
        </div>
    </div>

</div>

@if (MostrarModalCita)
{
    <div class="modal-backdrop show"></div>
    <div class="modal d-block" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Solicita una nueva Cita</h5>
                    <button type="button" class="btn-close" @onclick="() => MostrarModalCita = false" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <CrearCita CarritoItems="fullCarritoItems" UsuarioId="@user?.Id" OnClose="CerrarModalCita" />
                </div>
            </div>
        </div>
    </div>
}


@code {
    public ApplicationUser? user { get; set; }
    private List<CarritoItem>? paginatedCarritoItems { get; set; }
    private List<CarritoItem>? fullCarritoItems { get; set; }
    public bool MostrarModalCita { get; set; } = false;

    private int currentPage = 1;
    private int pageSize = 3;
    private int totalPages = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsUser = authState.User;

        if (claimsUser.Identity is not null && claimsUser.Identity.IsAuthenticated)
        {
            var userId = claimsUser.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                user = await UsuariosService.Buscar(userId);
                await CargarCarrito();
            }
        }
    }

    private async Task CargarCarrito()
    {
        if (user is null) return;

        paginatedCarritoItems = null;
        StateHasChanged();

        var result = await CarritoService.ObtenerItemsCarritoPaginadoAsync(user.Id, currentPage, pageSize);
        paginatedCarritoItems = result.Items;
        totalItems = result.TotalCount;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        if (totalPages == 0) totalPages = 1;

        fullCarritoItems = await CarritoService.ObtenerItemsCarrito(user.Id);

        StateHasChanged();
    }

    private async Task CambiarPagina(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await CargarCarrito();
    }

    private void CerrarModalCita()
    {
        MostrarModalCita = false;
    }

    private void EnviarPorWhatsapp()
    {
        if (fullCarritoItems is null || !fullCarritoItems.Any()) return;

        var mensaje = "*Hola estoy interesado en estas Propiedades:*\n";
        foreach (var item in fullCarritoItems)
        {
            var p = item.Propiedad;
            if (p != null)
            {
                mensaje += $"\n- *{p.Titulo}*\nPrecio: {p.Precio:N2} {(p.Moneda == "Dolar" ? "$USD" : "$DOP")}\n{p.Ciudad}\nhttps://ejemplo:7031/Propiedad/Detalle/{p.PropiedadId}\n";
            }
        }
        var total = fullCarritoItems.Sum(i => i.Propiedad?.Precio ?? 0);
        var moneda = fullCarritoItems.FirstOrDefault()?.Propiedad?.Moneda ?? "DOP";
        mensaje += $"Total: {total:N2} {(moneda == "Dolar" ? "$USD" : "$DOP")}";

        var url = $"https://wa.me/18098419551?text={Uri.EscapeDataString(mensaje)}";
        Navigation.NavigateTo(url, false);
    }

    public async Task EliminarItem(int PropiedadId)
    {
        var guardado = await CarritoService.Eliminar(user?.Id ?? string.Empty, PropiedadId);
        if (guardado)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Éxito", Detail = "Item eliminado del carrito.", Duration = 4000 });
            if (paginatedCarritoItems?.Count == 1 && currentPage > 1)
            {
                currentPage--;
            }
            await CargarCarrito();
        }
    }
}