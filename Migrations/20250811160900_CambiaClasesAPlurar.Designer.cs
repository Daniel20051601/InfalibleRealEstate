// <auto-generated />
using System;
using InfalibleRealEstate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfalibleRealEstate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250811160900_CambiaClasesAPlurar")]
    partial class CambiaClasesAPlurar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfalibleRealEstate.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("EstadoUsuarioId")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoUsuarioId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.CarritoItems", b =>
                {
                    b.Property<int>("CarritoItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarritoItemId"));

                    b.Property<int>("CarritoId")
                        .HasColumnType("integer");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.HasKey("CarritoItemId");

                    b.HasIndex("CarritoId");

                    b.HasIndex("PropiedadId");

                    b.ToTable("CarritoItems");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Carritos", b =>
                {
                    b.Property<int>("CarritoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarritoId"));

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("CarritoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Categorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Descripcion = "Unidad de vivienda en un edificio de apartamentos.",
                            NombreCategoria = "Apartamento"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Descripcion = "Vivienda unifamiliar o adosada.",
                            NombreCategoria = "Casa"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Descripcion = "Lote de tierra disponible para construcción.",
                            NombreCategoria = "Terreno"
                        },
                        new
                        {
                            CategoriaId = 4,
                            Descripcion = "Espacio para negocios y oficinas.",
                            NombreCategoria = "Local Comercial"
                        },
                        new
                        {
                            CategoriaId = 5,
                            Descripcion = "Casa de lujo, a menudo con jardín o terreno grande.",
                            NombreCategoria = "Villa"
                        },
                        new
                        {
                            CategoriaId = 6,
                            Descripcion = "Apartamento de dos niveles, regularmente con Jacuzzi",
                            NombreCategoria = "Penthouse"
                        });
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Citas", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CitaId"));

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("EstadoCitaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CitaId");

                    b.HasIndex("EstadoCitaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.CitasPropiedades", b =>
                {
                    b.Property<int>("CitaPropiedadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CitaPropiedadId"));

                    b.Property<int>("CitaId")
                        .HasColumnType("integer");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.HasKey("CitaPropiedadId");

                    b.HasIndex("CitaId");

                    b.HasIndex("PropiedadId");

                    b.ToTable("CitasPropiedades");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoCitas", b =>
                {
                    b.Property<int>("EstadoCitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoCitaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoCitaId");

                    b.ToTable("EstadoCitas");

                    b.HasData(
                        new
                        {
                            EstadoCitaId = 1,
                            Nombre = "Pendiente"
                        },
                        new
                        {
                            EstadoCitaId = 2,
                            Nombre = "Confirmada"
                        },
                        new
                        {
                            EstadoCitaId = 3,
                            Nombre = "Cancelada"
                        },
                        new
                        {
                            EstadoCitaId = 4,
                            Nombre = "Completada"
                        });
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoPropiedades", b =>
                {
                    b.Property<int>("EstadoPropiedadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoPropiedadId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoPropiedadId");

                    b.ToTable("EstadosPropiedad");

                    b.HasData(
                        new
                        {
                            EstadoPropiedadId = 1,
                            Descripcion = "La propiedad está visible y disponible.",
                            NombreEstado = "Activa"
                        },
                        new
                        {
                            EstadoPropiedadId = 3,
                            Descripcion = "La propiedad ha sido vendida y ya no está disponible.",
                            NombreEstado = "Vendida"
                        },
                        new
                        {
                            EstadoPropiedadId = 4,
                            Descripcion = "La propiedad ha sido alquilada y ya no está disponible.",
                            NombreEstado = "Alquilada"
                        },
                        new
                        {
                            EstadoPropiedadId = 6,
                            Descripcion = "La propiedad ha sido eliminada del sistema.",
                            NombreEstado = "Eliminada"
                        });
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoUsuarios", b =>
                {
                    b.Property<int>("EstadoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EstadoUsuarioId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EstadoUsuarioId");

                    b.ToTable("EstadosUsuarios");

                    b.HasData(
                        new
                        {
                            EstadoUsuarioId = 1,
                            Descripcion = "El usuario está activo y puede acceder al sistema.",
                            Nombre = "Activo"
                        },
                        new
                        {
                            EstadoUsuarioId = 2,
                            Descripcion = "El usuario no puede acceder al sistema.",
                            Nombre = "Inactivo"
                        },
                        new
                        {
                            EstadoUsuarioId = 3,
                            Descripcion = "El usuario ha sido suspendido temporalmente.",
                            Nombre = "Suspendido"
                        });
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Foros", b =>
                {
                    b.Property<int>("ForoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ForoId"));

                    b.Property<string>("AdministradorId")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("text");

                    b.Property<string>("LinkForo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ForoId");

                    b.HasIndex("AdministradorId");

                    b.ToTable("Foros");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.ImagenPropiedad", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImagenId"));

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ImagenId");

                    b.HasIndex("PropiedadId");

                    b.ToTable("ImagenesPropiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.PropiedadDetalle", b =>
                {
                    b.Property<int>("PropiedadId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Banos")
                        .HasColumnType("numeric");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Habitaciones")
                        .HasColumnType("integer");

                    b.Property<decimal>("MetrosCuadrados")
                        .HasColumnType("numeric");

                    b.Property<int>("Parqueo")
                        .HasColumnType("integer");

                    b.HasKey("PropiedadId");

                    b.ToTable("PropiedadDetalles");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Propiedades", b =>
                {
                    b.Property<int>("PropiedadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropiedadId"));

                    b.Property<string>("AdministradorId")
                        .HasColumnType("text");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EstadoPropiedadId")
                        .HasColumnType("integer");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoTransaccion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PropiedadId");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoPropiedadId");

                    b.ToTable("Propiedades");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SolicitudesUnirse", b =>
                {
                    b.Property<int>("SolicitudUnirseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SolicitudUnirseId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Experiencia")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NivelEstudios")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PorqueNosotros")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Profesion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TrabajaActualmente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("SolicitudUnirseId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudesUnirse");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SolicitudesVenta", b =>
                {
                    b.Property<int>("SolicitudVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SolicitudVentaId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("SolicitudVentaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SolicitudesVenta");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SuscripcionesNoticia", b =>
                {
                    b.Property<int>("SuscripcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SuscripcionId"));

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean")
                        .HasColumnName("activa");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("FechaSuscripcion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("SuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SuscripcionesNoticia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InfalibleRealEstate.Data.ApplicationUser", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.EstadoUsuarios", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoUsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EstadoUsuario");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.CarritoItems", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.Carritos", "Carrito")
                        .WithMany("CarritoItems")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Models.Propiedades", "Propiedad")
                        .WithMany()
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Carritos", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Usuario")
                        .WithOne("Carrito")
                        .HasForeignKey("InfalibleRealEstate.Models.Carritos", "UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Citas", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.EstadoCitas", "EstadoCita")
                        .WithMany("Citas")
                        .HasForeignKey("EstadoCitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Usuario")
                        .WithMany("Citas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCita");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.CitasPropiedades", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.Citas", "Cita")
                        .WithMany("CitaPropiedades")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Models.Propiedades", "Propiedad")
                        .WithMany("CitaPropiedades")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Foros", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Administrador")
                        .WithMany("Foros")
                        .HasForeignKey("AdministradorId");

                    b.Navigation("Administrador");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.ImagenPropiedad", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.Propiedades", "Propiedad")
                        .WithMany("Imagenes")
                        .HasForeignKey("PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.PropiedadDetalle", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.Propiedades", "Propiedad")
                        .WithOne("Detalle")
                        .HasForeignKey("InfalibleRealEstate.Models.PropiedadDetalle", "PropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Propiedades", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Administrador")
                        .WithMany("PropiedadesPublicadas")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InfalibleRealEstate.Models.Categorias", "Categoria")
                        .WithMany("Propiedades")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Models.EstadoPropiedades", "EstadoPropiedad")
                        .WithMany("Propiedades")
                        .HasForeignKey("EstadoPropiedadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("Categoria");

                    b.Navigation("EstadoPropiedad");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SolicitudesUnirse", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Usuario")
                        .WithMany("SolicitudesUnirse")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SolicitudesVenta", b =>
                {
                    b.HasOne("InfalibleRealEstate.Models.Categorias", "Categoria")
                        .WithMany("SolicitudesVenta")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Usuario")
                        .WithMany("SolicitudesVenta")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.SuscripcionesNoticia", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", "Usuario")
                        .WithMany("Suscripciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InfalibleRealEstate.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InfalibleRealEstate.Data.ApplicationUser", b =>
                {
                    b.Navigation("Carrito");

                    b.Navigation("Citas");

                    b.Navigation("Foros");

                    b.Navigation("PropiedadesPublicadas");

                    b.Navigation("SolicitudesUnirse");

                    b.Navigation("SolicitudesVenta");

                    b.Navigation("Suscripciones");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Carritos", b =>
                {
                    b.Navigation("CarritoItems");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Categorias", b =>
                {
                    b.Navigation("Propiedades");

                    b.Navigation("SolicitudesVenta");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Citas", b =>
                {
                    b.Navigation("CitaPropiedades");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoCitas", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoPropiedades", b =>
                {
                    b.Navigation("Propiedades");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.EstadoUsuarios", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("InfalibleRealEstate.Models.Propiedades", b =>
                {
                    b.Navigation("CitaPropiedades");

                    b.Navigation("Detalle");

                    b.Navigation("Imagenes");
                });
#pragma warning restore 612, 618
        }
    }
}
